test <- data[test_mark,]
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
colnames(test_Y) <- 1:9
## Cluster
k <- 5
cl <- kmeans(data[,1:2], centers = k)
ggplot() + geom_point(aes(x = data[,1], y = data[,2], colour = as.factor(cl$cluster)))
load("D:/Desktop/非参数/大作业/Data.RData")
## Cluster
k <- 5
cl <- kmeans(data[,1:2], centers = k)
ggplot() + geom_point(aes(x = data[,1], y = data[,2], colour = as.factor(cl$cluster)))
test_mark <- sapply(1:k, function(g){ sample(which(cl$cluster == 1), 1) })
train <- data[-test_mark,]
test <- data[test_mark,]
##  model test
test_Y <- as.data.frame(t(Y[test_mark]))
colnames(test_Y) <- 1:k
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
fit_1 <- gam(formula, data = train)
colnames(test_Y_1) <- 1:k
test_Y_1 <- as.data.frame(t(predict(fit_1, test)))
lonlat <- as.matrix(data[,1:2])
X <- as.matrix(poly(data$城市AQI, data$PM2.5浓度, data$PM10浓度, degree = 2, raw = T))
Y <- matrix(data[,10])
##  model test
test_Y <- as.data.frame(t(Y[test_mark]))
colnames(test_Y) <- 1:k
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
fit_1 <- gam(formula, data = train)
test_Y_1 <- as.data.frame(t(predict(fit_1, test)))
colnames(test_Y_1) <- 1:k
# model 2
test_Y_2 <- as.data.frame(t(sapply(test_mark, weight_reg, h = 100, fold = test_mark)))
colnames(test_Y_2) <- 1:k
weight_reg <- function(k, fold, h){
d <- sqrt(rowSums((lonlat[k,] - lonlat[-fold,])^2))
W <- dnorm(d, 0, h)
fit <- lm(Y[-fold] ~ X[-fold,], weights = W)
fit_value <- fit$coefficients %*% c(1,X[k,])
return(fit_value)
}
# model 2
test_Y_2 <- as.data.frame(t(sapply(test_mark, weight_reg, h = 100, fold = test_mark)))
colnames(test_Y_2) <- 1:k
library(reshape2)
dat <- melt(list(test_Y, test_Y_1, test_Y_2))
## Compare
ggplot(dat, aes(x = as.factor(variable), y = value, fill = as.factor(L1))) + geom_bar(stat='identity',position="dodge")
## Cluster
k <- 5
cl <- kmeans(data[,1:2], centers = k)
ggplot() + geom_point(aes(x = data[,1], y = data[,2], colour = as.factor(cl$cluster)))
folds <- sapply(1:k, function(g){which(cl$cluster == g)})
View(folds)
MSE_1 <- sapply(1:k, function(j){
train <- data[-folds[[j]],]
fit <- gam(formula, data = train)
test_Y <- predict(fit, data[folds[[j]],])
return(mean((test_Y - data$地区AQI[folds[[j]]])^2))
})
MSE_1
test_Y_1 <- as.data.frame(t(MSE_1))
colnames(test_Y_1) <- 1:k
# model 2
MSE_2 <- sapply(1:g, function(j){
test_Y <- sapply(folds[[j]], weight_reg, h = 100, fold = folds[[j]])
return(mean((test_Y - data[folds[[j]],10])^2))
})
# model 2
MSE_2 <- sapply(1:k, function(j){
test_Y <- sapply(folds[[j]], weight_reg, h = 100, fold = folds[[j]])
return(mean((test_Y - data[folds[[j]],10])^2))
})
MSE_1 <- as.data.frame(t(MSE_1))
colnames(MSE_1) <- 1:k
MSE_2 <- as.data.frame(t(MSE_2))
colnames(MSE_2) <- 1:k
dat <- melt(list(MSE_1, MSE_2))
dat
## Compare
ggplot(dat, aes(x = as.factor(variable), y = value, fill = as.factor(L1))) + geom_bar(stat='identity',position="dodge")
## Cluster
k <- 8
cl <- kmeans(data[,1:2], centers = k)
ggplot() + geom_point(aes(x = data[,1], y = data[,2], colour = as.factor(cl$cluster)))
##  model test
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
folds <- sapply(1:k, function(g){which(cl$cluster == g)})
MSE_1 <- sapply(1:k, function(j){
train <- data[-folds[[j]],]
fit <- gam(formula, data = train)
test_Y <- predict(fit, data[folds[[j]],])
return(mean((test_Y - data$地区AQI[folds[[j]]])^2))
})
MSE_1 <- as.data.frame(t(MSE_1))
colnames(MSE_1) <- 1:k
# model 2
MSE_2 <- sapply(1:k, function(j){
test_Y <- sapply(folds[[j]], weight_reg, h = 100, fold = folds[[j]])
return(mean((test_Y - data[folds[[j]],10])^2))
})
MSE_2 <- as.data.frame(t(MSE_2))
colnames(MSE_2) <- 1:k
library(reshape2)
dat <- melt(list(MSE_1, MSE_2))
## Compare
ggplot(dat, aes(x = as.factor(variable), y = value, fill = as.factor(L1))) + geom_bar(stat='identity',position="dodge")
## Cluster
k <- 9
cl <- kmeans(data[,1:2], centers = k)
ggplot() + geom_point(aes(x = data[,1], y = data[,2], colour = as.factor(cl$cluster)))
folds <- sapply(1:k, function(g){which(cl$cluster == g)})
##  model test
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
MSE_1 <- sapply(1:k, function(j){
train <- data[-folds[[j]],]
fit <- gam(formula, data = train)
test_Y <- predict(fit, data[folds[[j]],])
return(mean((test_Y - data$地区AQI[folds[[j]]])^2))
})
colnames(MSE_1) <- 1:k
MSE_1 <- as.data.frame(t(MSE_1))
# model 2
MSE_2 <- sapply(1:k, function(j){
test_Y <- sapply(folds[[j]], weight_reg, h = 100, fold = folds[[j]])
return(mean((test_Y - data[folds[[j]],10])^2))
})
MSE_2 <- as.data.frame(t(MSE_2))
library(reshape2)
colnames(MSE_2) <- 1:k
dat <- melt(list(MSE_1, MSE_2))
## Compare
ggplot(dat, aes(x = as.factor(variable), y = value, fill = as.factor(L1))) + geom_bar(stat='identity',position="dodge")
folds <- sapply(1:k, function(g){which(cl$cluster == g)})
##  model test
# model 1
formula <- 地区AQI ~ 城市AQI + te(PM2.5浓度, PM10浓度)
MSE_1 <- sapply(1:k, function(j){
train <- data[-folds[[j]],]
fit <- gam(formula, data = train)
test_Y <- predict(fit, data[folds[[j]],])
return(mean((test_Y - data$地区AQI[folds[[j]]])^2))
})
MSE_1 <- as.data.frame(t(MSE_1))
colnames(MSE_1) <- 1:k
# model 2
MSE_2 <- sapply(1:k, function(j){
test_Y <- sapply(folds[[j]], weight_reg, h = 100, fold = folds[[j]])
return(mean((test_Y - data[folds[[j]],10])^2))
})
MSE_2 <- as.data.frame(t(MSE_2))
colnames(MSE_2) <- 1:k
library(reshape2)
dat <- melt(list(MSE_1, MSE_2))
## Compare
ggplot(dat, aes(x = as.factor(variable), y = value, fill = as.factor(L1))) + geom_bar(stat='identity',position="dodge")
k <- sample(c(-1, 1), t)
## Data generating
n <- 100
t <- 100
c <- 1
k <- sample(c(-1, 1), t)
k <- sample(c(-1, 1), t, replace = T)
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
V
q <- rnorm(t)
R <- k * V + q
k <- sample(c(-1, 1), t, replace = T) * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
R <- k * V + q
q <- rnorm(t)
X <- (runif(t) < 0.5)
## Data generating
t <- 100
c <- 1
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, X, V, c, k){
- (X[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (X[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
X.t <- (runif(1) < 0.5)
X.t <- (runif(t) < 0.5)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a
u <- log(runif(t))
u
a <- (a > log(runif(t)))
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c <- exp(rnorm(0, 500))
c <- exp(rnorm(1, 0, 500))
c <- exp(rnorm(1, 0, 500))
c <- exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
exp(rnorm(1, 0, 500))
c <- exp(rnorm(1, 0, 100))
c
c.t <- exp(rnorm(1, 0, 100))
a <- sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
X <- a * c.t + (1 - a) * c
return(list(X, c))
}
para[[1]] <- list((runif(t) < 0.5), 1)
para[[1]]
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
X <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
View(para)
para <- para[[1]]
X <- para[[1]]
c <- para[[2]]
X
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
X <- a * c.t + (1 - a) * c
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
para[[1000]]
## Data generating
t <- 100
c <- 2.5
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 2.5
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 50
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 50
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
library(parallel)
## Data
setwd("D:/Documents/GitHub/The-Effects-of-Stringent-and-Mild-Interventions/Data/")
source("../Code/Epidemic_model.R")
region <- "Wenzhou"
Y <- read.csv("wzdat1014.csv")
Y <- Y[Y$ctname == region,]
R <- Y$confirmed
N <- Y$Population[1]
policy_change_1 <- 3
policy_change_2 <- 12
# Gibbs sampler
para <- c(1, 5.1, 9.5)
alp <- c(0.5, 0.2, 0.1)
I <- rep(1, length(R))
sigma_R_L <- 100
R_L <- R + 0.1
R_L[R_L < 10^(-10)] <- 10^(-10)
max_l <- -Inf
para_t <- list(para, I, R_L, sigma_R_L, alp, max_l)
para <- list()
para[[1]] <- para_t
k <- 30000
for(h in 2:k){
para[[1]] <- gibbs(para[[1]], R, N)
cat(c(h, floor(para[[1]][[2]][1:3]), para[[1]][[3]][1:3], para[[1]][[5]], para[[1]][[6]], para[[1]][[4]]), "\n")
}
for(h in 2:k){
para[[h]] <- gibbs(para[[h-1]], R, N)
cat(c(h, floor(para[[h]][[2]][1:4]), para[[h]][[3]][1:4], para[[h]][[5]], para[[h]][[6]], para[[h]][[4]]), "\n")
}
## Data
setwd("D:/Documents/GitHub/The-Effects-of-Stringent-and-Mild-Interventions/Data/")
source("../Code/Epidemic_model.R")
region <- "Wenzhou"
Y <- read.csv("wzdat1014.csv")
Y <- Y[Y$ctname == region,]
R <- Y$confirmed
N <- Y$Population[1]
policy_change_1 <- 3
policy_change_2 <- 12
# Gibbs sampler
para <- c(1, 5.1, 9.5)
alp <- c(0.5, 0.2, 0.1)
I <- rep(1, length(R))
sigma_R_L <- 100
R_L <- R + 0.1
R_L[R_L < 10^(-10)] <- 10^(-10)
max_l <- -Inf
para_t <- list(para, I, R_L, sigma_R_L, alp, max_l)
para <- list()
para[[1]] <- para_t
k <- 30000
for(h in 2:k){
para[[1]] <- gibbs(para[[1]], R, N)
cat(c(h, floor(para[[1]][[2]][1:3]), para[[1]][[3]][1:3], para[[1]][[5]], para[[1]][[6]], para[[1]][[4]]), "\n")
}
for(h in 2:k){
para[[h]] <- gibbs(para[[h-1]], R, N)
cat(c(h, floor(para[[h]][[2]][1:4]), para[[h]][[3]][1:4], para[[h]][[5]], para[[h]][[6]], para[[h]][[4]]), "\n")
}
save(para, file = paste0(region, "_para", ".rda"), version = 2)
